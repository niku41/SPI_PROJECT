`timescale 1ns / 1ps

module spi_appln(
input clk,sys_rst,appln_clk,rw,
input appln_cs,packet_done,busy,appln_cpol,appln_cpha,start,
output reg [7:0] appln_data_out,
output reg cs_to_master,
output cpha_to_master,cpol_to_master,clk_to_master
);
reg cs_to_master_1;
reg [2:0] appln_cnt;
reg [2:0] c_state,n_state;
reg [7:0]instr,addr1,addr2,addr3,data1;
assign wr_en = 8'h06;
assign clk_to_master  = clk;
assign cpha_to_master = appln_cpha;
assign cpol_to_master = appln_cpol;
    always@*
         begin 
           case(appln_cnt)
            3'b001: appln_data_out  = instr;
            3'b010: appln_data_out  = addr1;
            3'b011: appln_data_out  = addr2;
            3'b100: appln_data_out  = addr3;
            3'b101: appln_data_out  = data1;
           endcase
         end
    always @ (posedge packet_done or posedge sys_rst )
        begin
            if(sys_rst | appln_cnt==3'b110)
                appln_cnt <= 3'b001;
            else
                    appln_cnt <= appln_cnt +1;     
        end

always @(posedge packet_done,posedge sys_rst )
begin 
    if(sys_rst)begin 
        instr<=8'h06;
        addr1<=0;
        addr2<=0;
        addr3<=0;
        data1<=0;end
    else
        begin
             if(wr_en)
                instr<=8'h03;
                
             if(appln_cnt == 3'b101)begin 
                addr1<=addr1 + 1;
                    if(addr1==8'b11111111)
                         addr2<=addr2 + 1;
                            if(addr2==8'b11111111)
                                addr3<=addr3 + 1;end
            else if(appln_cnt ==3'b011)
                data1 <= data1 + 1;
        end
end

parameter IDLE = 3'b000,
          SETUP = 3'b001,
          WRITE = 3'b010,
          READ = 3'b011,
          STOP = 3'b100;
          
always @(posedge clk)
begin
    if(sys_rst)
        c_state<=IDLE;
    else
        c_state<=n_state;
end

//Next state logic

always @(*)
begin
    case(c_state)
        IDLE:
            if(start)
                n_state<=SETUP;
            else
                n_state<=IDLE;
        SETUP:
            if(packet_done==1 && rw==1)
                n_state<=WRITE;
            else if(packet_done==1 && rw==0)
                n_state<=READ;
            else
                n_state<=SETUP;
        WRITE:
            if(appln_cnt==3'b110)
                 n_state<=STOP;
            else
                n_state<=WRITE;
        READ:
             if(appln_cnt==3'b101)
                 n_state<=STOP;
             else
                n_state<=READ;
        STOP:
             if(rw)
                 n_state<=WRITE;
             else
                 n_state<=READ;
       endcase 
end

//output logic  

always @ (posedge clk)
begin 
    case(c_state)
        IDLE:begin 
                cs_to_master<=1;
            if(start)
                cs_to_master<=0;end
            
        SETUP:
                if(packet_done==1)
                    cs_to_master<=1;
                else
                    begin 
                    cs_to_master<=0;
                    instr<=8'h06;end
            
        WRITE:
              begin
                cs_to_master=0;
                instr<=8'h02;
              end
        READ:
             begin 
                cs_to_master=0;
                instr<=8'h03;
             end
        STOP:
             cs_to_master<=1;
             
    endcase 
    
end

endmodule
