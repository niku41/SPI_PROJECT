`timescale 1ns / 1ps

module top_spi(
    input clk,cs,cpol,cpha,miso,sys_rst,start,rw,
    output ss,sclk,mosi
    );

wire [7:0]data_bus;
wire packet_done_wire;
wire busy_wire;
wire [7:0]data_from_master_app;
wire cpol_wire;
wire cpha_wire;
wire fd_out;
reg [10:0] count;
wire clk_to_master,clk_to_appln,cs_wire;    
spi_appln inst1(.clk(fd_out),
                .sys_rst(sys_rst),
                .appln_cs(cs),
                .appln_cpha(cpha),
                .appln_cpol(cpol),
                .rw(rw),
                .packet_done(packet_done_wire),
                .appln_data_out(data_bus),
                .cpha_to_master(cpha_wire),
                .cpol_to_master(cpol_wire),
                .cs_to_master(cs_wire),
                .clk_to_master(clk_to_master),
                .busy(busy_wire),
                .start(start),
                .appln_clk(clk_to_appln));  

SPI_master inst2(.master_cs(cs_wire),
                 .clk_to_appln(clk_to_appln),
                 .master_clk(clk_to_master),
                 .miso(miso),
                 .master_cpha(cpha_wire),
                 .master_cpol(cpol_wire),
                 .data_in(data_bus),
                 .out_to_appln(data_from_master_app),
                 .sclk(sclk),
                 .mosi(mosi),
                 .packet_done(packet_done_wire),
                 .ss(ss),
                 .busy(busy_wire)) ; 

always @(posedge clk)
    begin
       if(sys_rst)
           count <= 0;
        else
              count<=count+1;
    end
    assign fd_out=count[10];

endmodule



